{"ast":null,"code":"var _jsxFileName = \"D:\\\\udacity-fsnd\\\\Project2-TriviaAPI\\\\FSND\\\\projects\\\\02_trivia_api\\\\starter\\\\frontend\\\\src\\\\components\\\\QuizView.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n\n    this.selectCategory = ({\n      type,\n      id = 0\n    }) => {\n      this.setState({\n        quizCategory: {\n          type,\n          id\n        }\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      $.ajax({\n        url: '/quizzes',\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          previousQuestions: previousQuestions,\n          quizCategory: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: '',\n            forceEnd: result.question ? false : true\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load question. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      let evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n      });\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n      return answerArray.includes(formatGuess);\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: \"/categories\",\n      //TODO: update request URL\n      type: \"GET\",\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n        return;\n      },\n      error: error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      }\n    });\n  }\n\n  renderPrePlay() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"choose-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Choose Category\"), React.createElement(\"div\", {\n      className: \"category-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: this.selectCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"ALL\"), Object.keys(this.state.categories).map(id => {\n      return React.createElement(\"div\", {\n        key: id,\n        value: id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory({\n          type: this.state.categories[id],\n          id\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, this.state.categories[id]);\n    })));\n  }\n\n  renderFinalScore() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"final-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \" Your Final Score is \", this.state.numCorrect), React.createElement(\"div\", {\n      className: \"play-again button\",\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \" Play Again? \"));\n  }\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n    let evaluate = this.evaluateAnswer();\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"div\", {\n      className: \"\".concat(evaluate ? 'correct' : 'wrong'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, evaluate ? \"You were correct!\" : \"You were incorrect\"), React.createElement(\"div\", {\n      className: \"quiz-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, this.state.currentQuestion.answer), React.createElement(\"div\", {\n      className: \"next-question button\",\n      onClick: this.getNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \" Next Question \"));\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"form\", {\n      onSubmit: this.submitGuess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"guess\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"submit-guess button\",\n      type: \"submit\",\n      value: \"Submit Answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })));\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["D:\\udacity-fsnd\\Project2-TriviaAPI\\FSND\\projects\\02_trivia_api\\starter\\frontend\\src\\components\\QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","constructor","props","selectCategory","type","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","state","currentQuestion","push","ajax","url","dataType","contentType","data","JSON","stringify","xhrFields","withCredentials","crossDomain","success","result","showAnswer","question","guess","forceEnd","error","alert","submitGuess","preventDefault","formatGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","answerArray","answer","split","includes","categories","componentDidMount","renderPrePlay","Object","keys","map","renderFinalScore","renderCorrectAnswer","renderPlay","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport '../stylesheets/QuizView.css';\r\n\r\nconst questionsPerPlay = 5; \r\n\r\nclass QuizView extends Component {\r\n  constructor(props){\r\n    super();\r\n    this.state = {\r\n        quizCategory: null,\r\n        previousQuestions: [], \r\n        showAnswer: false,\r\n        categories: {},\r\n        numCorrect: 0,\r\n        currentQuestion: {},\r\n        guess: '',\r\n        forceEnd: false\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    $.ajax({\r\n      url: `/categories`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({ categories: result.categories })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load categories. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  selectCategory = ({type, id=0}) => {\r\n    this.setState({quizCategory: {type, id}}, this.getNextQuestion)\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({[event.target.name]: event.target.value})\r\n  }\r\n\r\n  getNextQuestion = () => {\r\n    const previousQuestions = [...this.state.previousQuestions]\r\n    if(this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\r\n\r\n    $.ajax({\r\n      url: '/quizzes', //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({\r\n        previousQuestions: previousQuestions,\r\n        quizCategory: this.state.quizCategory\r\n      }),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        this.setState({\r\n          showAnswer: false,\r\n          previousQuestions: previousQuestions,\r\n          currentQuestion: result.question,\r\n          guess: '',\r\n          forceEnd: result.question ? false : true\r\n        })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load question. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  submitGuess = (event) => {\r\n    event.preventDefault();\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\r\n    let evaluate =  this.evaluateAnswer()\r\n    this.setState({\r\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\r\n      showAnswer: true,\r\n    })\r\n  }\r\n\r\n  restartGame = () => {\r\n    this.setState({\r\n      quizCategory: null,\r\n      previousQuestions: [], \r\n      showAnswer: false,\r\n      numCorrect: 0,\r\n      currentQuestion: {},\r\n      guess: '',\r\n      forceEnd: false\r\n    })\r\n  }\r\n\r\n  renderPrePlay(){\r\n      return (\r\n          <div className=\"quiz-play-holder\">\r\n              <div className=\"choose-header\">Choose Category</div>\r\n              <div className=\"category-holder\">\r\n                  <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\r\n                  {Object.keys(this.state.categories).map(id => {\r\n                  return (\r\n                    <div\r\n                      key={id}\r\n                      value={id}\r\n                      className=\"play-category\"\r\n                      onClick={() => this.selectCategory({type:this.state.categories[id], id})}>\r\n                      {this.state.categories[id]}\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n          </div>\r\n      )\r\n  }\r\n\r\n  renderFinalScore(){\r\n    return(\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\r\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  evaluateAnswer = () => {\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\r\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\r\n    return answerArray.includes(formatGuess)\r\n  }\r\n\r\n  renderCorrectAnswer(){\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\r\n    let evaluate =  this.evaluateAnswer()\r\n    return(\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\r\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\r\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderPlay(){\r\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\r\n      ? this.renderFinalScore()\r\n      : this.state.showAnswer \r\n        ? this.renderCorrectAnswer()\r\n        : (\r\n          <div className=\"quiz-play-holder\">\r\n            <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n            <form onSubmit={this.submitGuess}>\r\n              <input type=\"text\" name=\"guess\" onChange={this.handleChange}/>\r\n              <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\r\n            </form>\r\n          </div>\r\n        )\r\n  }\r\n\r\n\r\n  render() {\r\n    return this.state.quizCategory\r\n        ? this.renderPlay()\r\n        : this.renderPrePlay()\r\n  }\r\n}\r\n\r\nexport default QuizView;\r\n"]},"metadata":{},"sourceType":"module"}